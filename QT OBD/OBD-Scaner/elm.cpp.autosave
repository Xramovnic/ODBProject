#include "elm.h"

ELM::ELM(QObject *parent) :
    QObject(parent)
{
    m_sde = SerialDeviceEnumerator::instance();
    elmdevice = new AbstractSerial();
    connect(m_sde, SIGNAL(hasChanged(QStringList)),this, SLOT(slotPrintAllDevices(QStringList)));
    connect(elmdevice, SIGNAL(readyRead()), this, SLOT(slotDataReceive()));
    slotPrintAllDevices(this->m_sde->devicesAvailable());
}


void ELM::slotPrintAllDevices(const QStringList &list)
{
    enablecom.clear();
    foreach (QString s, list) {
       m_sde->setDeviceName(s);
       enablecom.append(this->m_sde->name());
      /*qDebug() << "\n <<< info about: " << this->m_sde->name() << " >>>";
        qDebug() << "-> description  : " << this->m_sde->description();
        qDebug() << "-> driver       : " << this->m_sde->driver();
        qDebug() << "-> friendlyName : " << this->m_sde->friendlyName();
        qDebug() << "-> hardwareID   : " << this->m_sde->hardwareID();
        qDebug() << "-> locationInfo : " << this->m_sde->locationInfo();
        qDebug() << "-> manufacturer : " << this->m_sde->manufacturer();
        qDebug() << "-> productID    : " << this->m_sde->productID();
        qDebug() << "-> service      : " << this->m_sde->service();
        qDebug() << "-> shortName    : " << this->m_sde->shortName();
        qDebug() << "-> subSystem    : " << this->m_sde->subSystem();
        qDebug() << "-> systemPath   : " << this->m_sde->systemPath();
        qDebug() << "-> vendorID     : " << this->m_sde->vendorID();

        qDebug() << "-> revision     : " << this->m_sde->revision();
        qDebug() << "-> bus          : " << this->m_sde->bus();
        //
        qDebug() << "-> is exists    : " << this->m_sde->isExists();
        qDebug() << "-> is busy      : " << this->m_sde->isBusy();*/
    }
    qDebug() << "\n ===> All devices: " << enablecom;
}

bool ELM::slotOpenPort(const QString &namedevice)
{
    elmdevice->setDeviceName(namedevice);
    m_sde->setDeviceName(namedevice);

    if  (m_sde->isBusy())
    {
         qDebug() << "port busy";
         return false;
    }

    if (elmdevice->open(AbstractSerial::ReadWrite))
        {
            qDebug() << "Serial device " << elmdevice->deviceName() << " open in " << elmdevice->openMode();
            return true;
        }
    else
        qDebug() << "Error open port";
    return false;
}

void ELM::slotClosePort()
{
    this->elmdevice->close();
}

bool ELM::slotWriteELMDate(char* data)
{
     elmdevice->write(data);
     qDebug() << "Writed is : " << data << " bytes";
     return true;
}

bool ELM::slotDataReceive()
{
    QByteArray byte;
    if (elmdevice && elmdevice->isOpen())
       {
         byte = elmdevice->readAll();
         QString d(byte);
         qDebug()<< d;
         emit ELMDataRecive(d);
         return true;
        }

    return false;
}
